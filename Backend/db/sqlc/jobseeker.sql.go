// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: jobseeker.sql

package db

import (
	"context"
	"database/sql"
)

const createCandidateProfile = `-- name: CreateCandidateProfile :one
INSERT INTO jobseeker (
    id,
    email,
    phone,
    firstname,
    lastname,
    photo,
    resume,
    address,
    city,
    state,
    pincode
) values (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, email, phone, firstname, lastname, photo, resume, address, city, state, pincode
`

type CreateCandidateProfileParams struct {
	ID        int64          `json:"id"`
	Email     string         `json:"email"`
	Phone     string         `json:"phone"`
	Firstname string         `json:"firstname"`
	Lastname  sql.NullString `json:"lastname"`
	Photo     []byte         `json:"photo"`
	Resume    []byte         `json:"resume"`
	Address   string         `json:"address"`
	City      string         `json:"city"`
	State     string         `json:"state"`
	Pincode   string         `json:"pincode"`
}

func (q *Queries) CreateCandidateProfile(ctx context.Context, arg CreateCandidateProfileParams) (Jobseeker, error) {
	row := q.db.QueryRowContext(ctx, createCandidateProfile,
		arg.ID,
		arg.Email,
		arg.Phone,
		arg.Firstname,
		arg.Lastname,
		arg.Photo,
		arg.Resume,
		arg.Address,
		arg.City,
		arg.State,
		arg.Pincode,
	)
	var i Jobseeker
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.Firstname,
		&i.Lastname,
		&i.Photo,
		&i.Resume,
		&i.Address,
		&i.City,
		&i.State,
		&i.Pincode,
	)
	return i, err
}

const getCandateProfile = `-- name: GetCandateProfile :one
SELECT id, email, phone, firstname, lastname, photo, resume, address, city, state, pincode FROM jobseeker
WHERE id = $1
`

func (q *Queries) GetCandateProfile(ctx context.Context, id int64) (Jobseeker, error) {
	row := q.db.QueryRowContext(ctx, getCandateProfile, id)
	var i Jobseeker
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.Firstname,
		&i.Lastname,
		&i.Photo,
		&i.Resume,
		&i.Address,
		&i.City,
		&i.State,
		&i.Pincode,
	)
	return i, err
}

const updateCandaidatePhoto = `-- name: UpdateCandaidatePhoto :exec
UPDATE jobseeker
SET photo = $2
WHERE id = $1
`

type UpdateCandaidatePhotoParams struct {
	ID    int64  `json:"id"`
	Photo []byte `json:"photo"`
}

func (q *Queries) UpdateCandaidatePhoto(ctx context.Context, arg UpdateCandaidatePhotoParams) error {
	_, err := q.db.ExecContext(ctx, updateCandaidatePhoto, arg.ID, arg.Photo)
	return err
}

const updateCandaidateResume = `-- name: UpdateCandaidateResume :exec
UPDATE jobseeker
SET resume = $2
WHERE id = $1
`

type UpdateCandaidateResumeParams struct {
	ID     int64  `json:"id"`
	Resume []byte `json:"resume"`
}

func (q *Queries) UpdateCandaidateResume(ctx context.Context, arg UpdateCandaidateResumeParams) error {
	_, err := q.db.ExecContext(ctx, updateCandaidateResume, arg.ID, arg.Resume)
	return err
}

const updateCandidateProfile = `-- name: UpdateCandidateProfile :exec
UPDATE jobseeker
SET email = $2, phone = $3, address = $4, city = $5, state = $6, pincode = $7
WHERE id = $1
`

type UpdateCandidateProfileParams struct {
	ID      int64  `json:"id"`
	Email   string `json:"email"`
	Phone   string `json:"phone"`
	Address string `json:"address"`
	City    string `json:"city"`
	State   string `json:"state"`
	Pincode string `json:"pincode"`
}

func (q *Queries) UpdateCandidateProfile(ctx context.Context, arg UpdateCandidateProfileParams) error {
	_, err := q.db.ExecContext(ctx, updateCandidateProfile,
		arg.ID,
		arg.Email,
		arg.Phone,
		arg.Address,
		arg.City,
		arg.State,
		arg.Pincode,
	)
	return err
}
