// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    password
) values (
    username = $1, password = $2
) RETURNING id, username, password, softdelete
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Softdelete,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id FROM users
WHERE username = $1
`

func (q *Queries) GetUser(ctx context.Context, username string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateCredentials = `-- name: UpdateCredentials :exec
UPDATE users
SET password = $2
WHERE id = $1
`

type UpdateCredentialsParams struct {
	ID       int64  `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) UpdateCredentials(ctx context.Context, arg UpdateCredentialsParams) error {
	_, err := q.db.ExecContext(ctx, updateCredentials, arg.ID, arg.Password)
	return err
}
